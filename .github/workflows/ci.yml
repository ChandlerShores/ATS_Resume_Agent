name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint black ruff bandit vulture safety
    
    - name: Create .env for testing
      run: |
        echo "NODE_ENV=test" > .env
        echo "OPENAI_API_KEY=test_key" >> .env
        echo "ANTHROPIC_API_KEY=test_key" >> .env
    
    - name: Lint with ruff
      run: ruff check . --output-format=github
      continue-on-error: true
    
    - name: Check code formatting with black
      run: black --check --diff .
      continue-on-error: true
    
    - name: Type check with mypy
      run: pip install mypy && mypy . --ignore-missing-imports || true
      continue-on-error: true
    
    - name: Security scan with bandit
      run: bandit -r . -f json -o bandit-report.json || true
      continue-on-error: true
    
    - name: Run tests
      run: pytest tests/ -v --tb=short || true
      continue-on-error: true
    
    - name: Dead code check
      run: vulture . --min-confidence 80 || true
      continue-on-error: true

  build-docker:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ats-resume-agent:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker build -t ats-resume-agent:test .
        docker run --rm ats-resume-agent:test python -c "import api.main; print('âœ“ Docker image works')"

